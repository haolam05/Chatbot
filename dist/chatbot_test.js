"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert = __importStar(require("assert"));
var chatbot_1 = require("./chatbot");
describe('chatbot', function () {
    it('matchPattern', function () {
        var words1 = ['a', 'b', 'c', 'd'];
        assert.deepStrictEqual((0, chatbot_1.matchPattern)(words1, [['b', 'e']]), undefined);
        assert.deepStrictEqual((0, chatbot_1.matchPattern)(words1, [['b', 'c']]), [['a'], ['d']]);
        assert.deepStrictEqual((0, chatbot_1.matchPattern)(words1, [['a', 'b']]), [[], ['c', 'd']]);
        assert.deepStrictEqual((0, chatbot_1.matchPattern)(words1, [['c', 'd']]), [['a', 'b'], []]);
        var words2 = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];
        assert.deepStrictEqual((0, chatbot_1.matchPattern)(words2, [['b', 'c'], ['e', 'z']]), undefined);
        assert.deepStrictEqual((0, chatbot_1.matchPattern)(words2, [['b', 'c'], ['e', 'f']]), [['a'], ['d'], ['g']]);
        assert.deepStrictEqual((0, chatbot_1.matchPattern)(words2, [['b', 'c'], ['d', 'e']]), [['a'], [], ['f', 'g']]);
        assert.deepStrictEqual((0, chatbot_1.matchPattern)(words2, [['a', 'b'], ['f', 'g']]), [[], ['c', 'd', 'e'], []]);
        var words3 = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'];
        assert.deepStrictEqual((0, chatbot_1.matchPattern)(words3, [['b', 'c'], ['e', 'f'], ['h', 'z']]), undefined);
        assert.deepStrictEqual((0, chatbot_1.matchPattern)(words3, [['b', 'c'], ['e', 'f'], ['h', 'i']]), [['a'], ['d'], ['g'], ['j']]);
        assert.deepStrictEqual((0, chatbot_1.matchPattern)(words3, [['b', 'c'], ['e', 'f'], ['i', 'j']]), [['a'], ['d'], ['g', 'h'], []]);
        assert.deepStrictEqual((0, chatbot_1.matchPattern)(words3, [['b', 'c'], ['e', 'f'], ['g', 'h']]), [['a'], ['d'], [], ['i', 'j']]);
    });
    var PATTERNS = [
        { name: "foo",
            contains: [['foo']],
            responses: [
                ['why', 0, 'and', 'not', 1],
                [0, ',', 'is', 'that', 'so?'],
            ] },
        { name: "my",
            contains: [['my']],
            responses: [['talk', 'more', 'about', 'your', 1]] },
        { name: "bar",
            contains: [['bar']],
            responses: [['what', 'about', 1, '?']] }
    ];
    it('applyPattern', function () {
        var used = new Map();
        assert.deepStrictEqual((0, chatbot_1.applyPattern)(PATTERNS[0], [['arg0'], ['arg1']], used), ['why', 'arg0', 'and', 'not', 'arg1']);
        assert.strictEqual(used.size, 1);
        assert.strictEqual(used.get("foo"), 0);
        assert.deepStrictEqual((0, chatbot_1.applyPattern)(PATTERNS[0], [['arg0'], ['arg1']], used), ['arg0', ',', 'is', 'that', 'so?']);
        assert.strictEqual(used.size, 1);
        assert.strictEqual(used.get("foo"), 1);
        assert.deepStrictEqual((0, chatbot_1.applyPattern)(PATTERNS[0], [['A'], ['B']], used), ['why', 'A', 'and', 'not', 'B']);
        assert.strictEqual(used.size, 1);
        assert.strictEqual(used.get("foo"), 0);
        assert.deepStrictEqual((0, chatbot_1.applyPattern)(PATTERNS[2], [['arg0'], ['arg1']], used), ['what', 'about', 'arg1', '?']);
        assert.strictEqual(used.size, 2);
        assert.strictEqual(used.get("foo"), 0);
        assert.strictEqual(used.get("bar"), 0);
    });
    it('chatResponse', function () {
        var memory = [];
        var used = new Map();
        assert.deepStrictEqual((0, chatbot_1.chatResponse)(['arg0', 'my', 'foo', 'arg1'], used, memory, PATTERNS), ['why', 'arg0', 'my', 'and', 'not', 'arg1']);
        assert.strictEqual(used.size, 1);
        assert.strictEqual(used.get("foo"), 0);
        assert.strictEqual(memory.length, 0);
        assert.deepStrictEqual((0, chatbot_1.chatResponse)(['arg2', 'my', 'bar', 'arg3'], used, memory, PATTERNS), ['what', 'about', 'arg3', '?']);
        assert.strictEqual(used.size, 3);
        assert.strictEqual(used.get("bar"), 0);
        assert.strictEqual(used.get("foo"), 0);
        assert.strictEqual(used.get("my"), 0);
        assert.strictEqual(memory.length, 1);
        assert.deepStrictEqual((0, chatbot_1.chatResponse)(['arg4', 'foo', 'arg5'], used, memory, PATTERNS), ['arg4', ',', 'is', 'that', 'so?']);
        assert.strictEqual(used.size, 3);
        assert.strictEqual(used.get("bar"), 0);
        assert.strictEqual(used.get("foo"), 1);
        assert.strictEqual(used.get("my"), 0);
        assert.strictEqual(memory.length, 1);
        assert.deepStrictEqual((0, chatbot_1.chatResponse)(['arg5', 'baz', 'arg6'], used, memory, PATTERNS), ['talk', 'more', 'about', 'your', 'bar', 'arg3']);
        assert.strictEqual(used.size, 3);
        assert.strictEqual(used.get("bar"), 0);
        assert.strictEqual(used.get("foo"), 1);
        assert.strictEqual(used.get("my"), 0);
        assert.strictEqual(memory.length, 0);
        assert.deepStrictEqual((0, chatbot_1.chatResponse)(['arg2', 'baz', 'arg3'], used, memory, PATTERNS), ["I'm", "not", "sure", "I", "understand", "you", "fully", "."]);
        assert.strictEqual(used.size, 4);
        assert.strictEqual(used.get(".none"), 0);
        assert.strictEqual(used.get("bar"), 0);
        assert.strictEqual(used.get("foo"), 1);
        assert.strictEqual(used.get("my"), 0);
        assert.strictEqual(memory.length, 0);
    });
    it('assemble', function () {
        assert.deepStrictEqual((0, chatbot_1.assemble)([], [['a'], ['b']]), []);
        assert.deepStrictEqual((0, chatbot_1.assemble)(['foo'], [['a'], ['b']]), ['foo']);
        assert.deepStrictEqual((0, chatbot_1.assemble)([0], [['a'], ['b', 'c']]), ['a']);
        assert.deepStrictEqual((0, chatbot_1.assemble)([1], [['a'], ['b', 'c']]), ['b', 'c']);
        assert.deepStrictEqual((0, chatbot_1.assemble)(['d', 0], [['a'], ['b', 'c']]), ['d', 'a']);
        assert.deepStrictEqual((0, chatbot_1.assemble)(['d', 1], [['a'], ['b', 'c']]), ['d', 'b', 'c']);
        assert.deepStrictEqual((0, chatbot_1.assemble)(['d', 0, 'e'], [['a'], ['b', 'c']]), ['d', 'a', 'e']);
        assert.deepStrictEqual((0, chatbot_1.assemble)(['d', 1, 'e'], [['a'], ['b', 'c']]), ['d', 'b', 'c', 'e']);
        assert.deepStrictEqual((0, chatbot_1.assemble)(['the', 'quick', 1, 2, 'jumped', 'over', 'the', 'lazy', 0], [['dog'], ['brown'], ['fox']]), ['the', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog']);
    });
});
//# sourceMappingURL=data:application/json;base64,