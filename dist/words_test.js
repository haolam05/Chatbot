"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert = __importStar(require("assert"));
var words_1 = require("./words");
describe('words', function () {
    it('substitute', function () {
        // TODO: (part 1c) add tests here
        var m1 = new Map([["key1", "value1"], ["key2", "value2"]]);
        var m2 = new Map([["key1", "value1"], ["key2", "value2"], ["key3", "value3"], ["key4", "value4"]]);
        var s1 = [];
        var s2 = ["key3"];
        var s3 = ["key4"];
        var s4 = ["key3", "key4"];
        var s5 = ["key4", "key3"];
        (0, words_1.substitute)(s1, m1);
        assert.deepStrictEqual(s1, []);
        (0, words_1.substitute)(s1, m2);
        assert.deepStrictEqual(s1, []);
        (0, words_1.substitute)(s2, m1);
        assert.deepStrictEqual(s2, ["key3"]);
        (0, words_1.substitute)(s3, m1);
        assert.deepStrictEqual(s3, ["key4"]);
        (0, words_1.substitute)(s4, m1);
        assert.deepStrictEqual(s4, ["key3", "key4"]);
        (0, words_1.substitute)(s5, m1);
        assert.deepStrictEqual(s5, ["key4", "key3"]);
        (0, words_1.substitute)(s2, m2);
        assert.deepStrictEqual(s2, ["value3"]);
        (0, words_1.substitute)(s3, m2);
        assert.deepStrictEqual(s3, ["value4"]);
        (0, words_1.substitute)(s4, m2);
        assert.deepStrictEqual(s4, ["value3", "value4"]);
        (0, words_1.substitute)(s5, m2);
        assert.deepStrictEqual(s5, ["value4", "value3"]);
    });
    it('replaceWords', function () {
        var repl = new Map([["a", ["a", "b", "c"]], ["d", ["e", "f"]]]);
        assert.deepStrictEqual((0, words_1.replaceWords)([], repl), []);
        assert.deepStrictEqual((0, words_1.replaceWords)(["the"], repl), ["the"]);
        assert.deepStrictEqual((0, words_1.replaceWords)(["a"], repl), ["a", "b", "c"]);
        assert.deepStrictEqual((0, words_1.replaceWords)(["the", "a", "dog"], repl), ["the", "a", "b", "c", "dog"]);
        assert.deepStrictEqual((0, words_1.replaceWords)(["the", "a", "dog", "d"], repl), ["the", "a", "b", "c", "dog", "e", "f"]);
    });
    it('splitWords', function () {
        assert.deepStrictEqual((0, words_1.splitWords)(""), []);
        assert.deepStrictEqual((0, words_1.splitWords)(" "), []);
        assert.deepStrictEqual((0, words_1.splitWords)("."), ["."]);
        assert.deepStrictEqual((0, words_1.splitWords)("a"), ["a"]);
        assert.deepStrictEqual((0, words_1.splitWords)("abc"), ["abc"]);
        assert.deepStrictEqual((0, words_1.splitWords)("ab,"), ["ab", ","]);
        assert.deepStrictEqual((0, words_1.splitWords)("ab,c"), ["ab", ",", "c"]);
        assert.deepStrictEqual((0, words_1.splitWords)("ab ,c"), ["ab", ",", "c"]);
        assert.deepStrictEqual((0, words_1.splitWords)("ab, c"), ["ab", ",", "c"]);
        assert.deepStrictEqual((0, words_1.splitWords)("ab , c"), ["ab", ",", "c"]);
        assert.deepStrictEqual((0, words_1.splitWords)("a b , c"), ["a", "b", ",", "c"]);
        assert.deepStrictEqual((0, words_1.splitWords)("abc, def! gh"), ["abc", ",", "def", "!", "gh"]);
        assert.deepStrictEqual((0, words_1.splitWords)("abc def  gh"), ["abc", "def", "gh"]);
    });
    it('wordsContain', function () {
        assert.strictEqual((0, words_1.wordsContain)([], ["a"]), -1);
        assert.strictEqual((0, words_1.wordsContain)(["a", "b"], ["a"]), 0);
        assert.strictEqual((0, words_1.wordsContain)(["c", "a", "b"], ["a"]), 1);
        assert.strictEqual((0, words_1.wordsContain)(["c", "a", "c", "d"], ["d"]), 3);
        assert.strictEqual((0, words_1.wordsContain)(["c", "a", "d", "c", "e"], ["a"]), 1);
        assert.strictEqual((0, words_1.wordsContain)(["c", "a", "d", "c", "e"], ["f"]), -1);
        assert.strictEqual((0, words_1.wordsContain)([], ["a", "b"]), -1);
        assert.strictEqual((0, words_1.wordsContain)(["a", "b"], ["a", "b"]), 0);
        assert.strictEqual((0, words_1.wordsContain)(["c", "a", "b"], ["a", "b"]), 1);
        assert.strictEqual((0, words_1.wordsContain)(["c", "a", "c", "d"], ["a", "c"]), 1);
        assert.strictEqual((0, words_1.wordsContain)(["c", "a", "d", "c", "e"], ["a", "c"]), -1);
        assert.strictEqual((0, words_1.wordsContain)(["a", "b", "c", "d", "e"], ["a", "b", "c"]), 0);
        assert.strictEqual((0, words_1.wordsContain)(["a", "b", "c", "d", "e"], ["a", "b", "d"]), -1);
        assert.strictEqual((0, words_1.wordsContain)(["a", "b", "c", "d", "e"], ["b", "c", "d"]), 1);
        assert.strictEqual((0, words_1.wordsContain)(["a", "b", "c", "d", "e"], ["b", "c", "a"]), -1);
        assert.strictEqual((0, words_1.wordsContain)(["a", "b", "c", "d", "e"], ["c", "d", "e"]), 2);
        assert.strictEqual((0, words_1.wordsContain)(["a", "b", "c", "d", "e"], ["c", "d", "c"]), -1);
        assert.strictEqual((0, words_1.wordsContain)(["A", "B", "C", "D", "E"], ["c", "d", "e"]), 2);
        assert.strictEqual((0, words_1.wordsContain)(["A", "B", "C", "D", "E"], ["c", "d", "c"]), -1);
    });
    it('joinWords', function () {
        assert.strictEqual((0, words_1.joinWords)([]), "");
        assert.strictEqual((0, words_1.joinWords)(["a"]), "a");
        assert.strictEqual((0, words_1.joinWords)([","]), ",");
        assert.strictEqual((0, words_1.joinWords)(["a", "!"]), "a!");
        assert.strictEqual((0, words_1.joinWords)(["a", "b"]), "a b");
        assert.strictEqual((0, words_1.joinWords)(["abc", "def"]), "abc def");
        assert.strictEqual((0, words_1.joinWords)(["a", ",", "b"]), "a, b");
        assert.strictEqual((0, words_1.joinWords)(["a", ",", "b", "c", "!"]), "a, b c!");
        assert.strictEqual((0, words_1.joinWords)(["a", ",", "b", "c", "!", "d"]), "a, b c! d");
        assert.strictEqual((0, words_1.joinWords)(["what", "?", "!", "?"]), "what?!?");
    });
});
//# sourceMappingURL=data:application/json;base64,